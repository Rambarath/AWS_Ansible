# To store vpc name in the common place for future enhancement
- name: Setting VPC fact
  ec2_vpc_net_facts:
    filters:
      "tag:Name": "{{ vpc_name }}"
  register: vpc_facts

# Store VPC id value into fact
- name: "setting VPC ID fact"
  set_fact:
    vpc_id: "{{ vpc_facts.vpcs[0].id }}"

# Setting VPC subnet facts
- name: setting VPC subnet fact
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: vpc_subnet_facts

# parse the facts output and extract the IDs with some fancy filter work:
# - iterate each subnet found by the facts query
# - for that subnet, define a "name: id" entry in the `vpc_subnet_ids` dictionary (or empty dictionary if it doesn't exist)
- name: "setting vpc subnet id"
  set_fact:
    vpc_subnet_ids: "{{ vpc_subnet_ids | default({}) | combine({ (item.tags.Name | default('default')): item.id }) }}"
  loop: "{{ vpc_subnet_facts.subnets }}"

# setting VPC security group facts
- name: Setting vpc security group facts
  ec2_group_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: vpc_security_group_facts

# parse the facts output and extract the IDs with some fancy filter work:
# - iterate each security group found by the facts query
# - for that group, define a "name: id" entry in the `vpc_security_group_ids` dictionary (or empty dictionary if it doesn't exist)
- name: "setting security group facts"
  set_fact:
    vpc_security_group_ids: "{{ vpc_security_group_ids | default({}) | combine({ (item.group_name | default('default')): item.group_id }) }}"
  loop: "{{ vpc_security_group_facts.security_groups }}"

# finding NAt gateway using VPC fact
- name: NAt gateway using VPC facts
  ec2_vpc_nat_gateway_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: vpc_nat_gateway_facts

# Getting Nat gateway using the acts for future enhancement
- name: "setting facts for vpc nat gateway"
  set_fact:
    vpc_nat_gateway_ip: "{{ vpc_nat_gateway_facts.result[0].nat_gateway_addresses[0].public_ip }}"
